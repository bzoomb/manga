name: Manga Download and Upload

on:
  workflow_dispatch:
    inputs:
      custom_index:
        description: 'Specify a custom index number (leave blank to use last index)'
        required: false
        default: ''
      set_custom_as_last:
        description: 'Set custom index as the last index'
        type: boolean
        required: false
        default: false
      reset_index:
        description: 'Reset index to 1'
        type: boolean
        required: false
        default: false

permissions:
  contents: write

jobs:
  download_and_upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install mangadex-downloader
          sudo apt-get install -y rclone

      - name: Determine Starting Index
        id: determine_index
        run: |
          if [[ -n "${{ github.event.inputs.custom_index }}" ]]; then
            echo "Using custom index: ${{ github.event.inputs.custom_index }}"
            echo "${{ github.event.inputs.custom_index }}" > last_index.txt
            if [[ "${{ github.event.inputs.set_custom_as_last }}" == "true" ]]; then
              echo "Setting custom index as the last index"
            else
              echo "$(({{ github.event.inputs.custom_index }} + 1))" > next_index.txt
            fi
          elif [[ "${{ github.event.inputs.reset_index }}" == "true" ]]; then
            echo "Resetting index to 1."
            echo "1" > last_index.txt
          elif [[ -f last_index.txt ]]; then
            last_index=$(cat last_index.txt)
            echo "$((last_index + 1))" > last_index.txt
          else
            echo "1" > last_index.txt
          fi
          echo "starting_index=$(cat last_index.txt)" >> $GITHUB_OUTPUT

      - name: Get the Next URL
        id: get_url
        run: |
          current_index=$(cat last_index.txt)
          echo "Fetching URL from line ${current_index}."
          if ! sed -n "${current_index}p" manga.txt > current_url.txt; then
            echo "Error: Failed to read URL from manga.txt"
            exit 1
          fi
          if [[ ! -s current_url.txt ]]; then
            echo "No URL found at line ${current_index}. Workflow complete."
            echo "workflow_complete=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "URL to download:"
          cat current_url.txt
          echo "manga_url=$(cat current_url.txt)" >> $GITHUB_OUTPUT

      - name: Download Manga
        if: steps.get_url.outputs.workflow_complete != 'true'
        run: |
          mangadex-dl $(cat current_url.txt) --no-group-name -d manga --progress-bar-layout=none -wti


      - name: Determine Folder Name
        if: steps.get_url.outputs.workflow_complete != 'true'
        id: folder_name
        run: |
          manga_folder=$(ls manga)
          if [ -z "$manga_folder" ]; then
            echo "Error: No manga folder found"
            exit 1
          fi
          echo "${manga_folder}" > folder_name.txt
          sanitized_folder_name=$(echo "${manga_folder}" | tr -d ' ' | tr '[:upper:]' '[:lower:]')
          echo "${sanitized_folder_name}" > archive_name.txt
          echo "manga_folder=${manga_folder}" >> $GITHUB_OUTPUT
          echo "archive_name=${sanitized_folder_name}" >> $GITHUB_OUTPUT

      - name: Archive Manga Folder
        if: steps.get_url.outputs.workflow_complete != 'true'
        run: |
          manga_folder=$(cat folder_name.txt)
          archive_name=$(cat archive_name.txt)
          echo "Archiving folder '${manga_folder}' to '${archive_name}.tar'"
          if ! tar -cf "${archive_name}.tar" -C manga "${manga_folder}"; then
            echo "Error: Failed to create archive"
            exit 1
          fi
          echo "Archive created: ${archive_name}.tar"

      - name: Upload to PixelDrain
        if: steps.get_url.outputs.workflow_complete != 'true'
        env:
          PIXELDRAIN_API: ${{ secrets.PIXELDRAIN_API }}
        run: |
          pdup() {
            [ -z "$1" ] && echo "Error: File not specified!" && return 1
            ID=$(curl --progress-bar -T "$1" -u :${PIXELDRAIN_API} https://pixeldrain.com/api/file/ | grep -Po '(?<="id":")[^"]*')
            if [ -n "$ID" ]; then
              echo "https://pixeldrain.com/u/$ID" > upload_link.txt
              echo "https://pd.cybar.xyz/$ID" > custom_upload_link.txt
              return 0
            else
              echo "Error: Failed to upload file to PixelDrain"
              return 1
            fi
          }
          
          archive_name=$(cat archive_name.txt)
          if ! pdup "${archive_name}.tar"; then
            exit 1
          fi
          
      - name: Send Telegram Notification
        if: steps.get_url.outputs.workflow_complete != 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          current_index=$(cat last_index.txt)
          archive_name=$(cat archive_name.txt)
          upload_link=$(cat upload_link.txt)
          custom_upload_link=$(cat custom_upload_link.txt)
          file_size=$(du -h "${archive_name}.tar" | cut -f1)
          message="üéâ Manga Upload Successful! üéâ\n\nüìö Title: ${archive_name}\nüìä Size: ${file_size}\nüî¢ Index: ${current_index}\n\nüì• Download Links:\n1Ô∏è‚É£ PixelDrain: ${upload_link}\n2Ô∏è‚É£ Custom: ${custom_upload_link}"
          if ! curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" -d chat_id="${TELEGRAM_CHAT_ID}" -d text="${message}" -d parse_mode="HTML"; then
            echo "Error: Failed to send Telegram notification"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -rf manga
          rm -f *.tar

      - name: Update Index
        if: steps.get_url.outputs.workflow_complete != 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if [[ -f next_index.txt ]]; then
            mv next_index.txt last_index.txt
          fi
          git add last_index.txt
          git status
          if git diff --staged --quiet; then
            echo "No changes to commit in last_index.txt"
          else
            git commit -m "Update last processed index to $(cat last_index.txt)"
            if ! git push; then
              echo "Error: Failed to push changes"
              exit 1
            fi
          fi

      - name: Check for Workflow Completion
        if: steps.get_url.outputs.workflow_complete == 'true'
        run: |
          echo "Workflow complete. All URLs processed."
