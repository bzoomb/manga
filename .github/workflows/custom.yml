name: custom

on:
  workflow_dispatch:
    inputs:
      single_index:
        description: 'Single index to process (e.g., 5)'
        required: false
        type: string
      index_range:
        description: 'Index range to process (e.g., 3-13)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  process_manga:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install mangadex-downloader

      - name: Determine Indices
        id: determine_indices
        run: |
          if [[ -n "${{ github.event.inputs.single_index }}" ]]; then
            echo "start_index=${{ github.event.inputs.single_index }}" >> $GITHUB_OUTPUT
            echo "end_index=${{ github.event.inputs.single_index }}" >> $GITHUB_OUTPUT
          elif [[ -n "${{ github.event.inputs.index_range }}" ]]; then
            IFS='-' read -ra RANGE <<< "${{ github.event.inputs.index_range }}"
            echo "start_index=${RANGE[0]}" >> $GITHUB_OUTPUT
            echo "end_index=${RANGE[1]}" >> $GITHUB_OUTPUT
          elif [[ -f last_index.txt ]]; then
            last_index=$(cat last_index.txt)
            echo "start_index=$((last_index + 1))" >> $GITHUB_OUTPUT
            echo "end_index=$((last_index + 1))" >> $GITHUB_OUTPUT
          else
            echo "start_index=1" >> $GITHUB_OUTPUT
            echo "end_index=1" >> $GITHUB_OUTPUT
          fi

      - name: Get URLs
        id: get_urls
        run: |
          start_index=${{ steps.determine_indices.outputs.start_index }}
          end_index=${{ steps.determine_indices.outputs.end_index }}
          echo "Start index: $start_index"
          echo "End index: $end_index"
          urls=()
          for ((i=start_index; i<=end_index; i++)); do
            url=$(sed -n "${i}p" manga.txt)
            if [[ -z "$url" ]]; then
              echo "No URL found at line ${i}. Stopping."
              break
            fi
            urls+=("$url")
          done
          if [[ ${#urls[@]} -eq 0 ]]; then
            echo "workflow_complete=true" >> $GITHUB_OUTPUT
          else
            echo "urls=${urls[*]}" >> $GITHUB_OUTPUT
          fi

      - name: Download Manga
        if: steps.get_urls.outputs.workflow_complete != 'true'
        id: download_manga
        run: |
          IFS=' ' read -ra URLS <<< "${{ steps.get_urls.outputs.urls }}"
          current_index=${{ steps.determine_indices.outputs.start_index }}
          for url in "${URLS[@]}"; do
            echo "Downloading manga from URL: $url"
            mangadex-dl "$url" --no-group-name -d manga --progress-bar-layout=none -wti
            
            manga_folder=$(ls manga)
            if [ -z "$manga_folder" ]; then
              echo "Error: No manga folder found for $url"
              continue
            fi
            sanitized_folder_name=$(echo "${manga_folder}" | tr -d ' ' | tr '[:upper:]' '[:lower:]')
            
            echo "Archiving folder '${manga_folder}' to '${sanitized_folder_name}.tar'"
            if ! tar -cf "${sanitized_folder_name}.tar" -C manga "${manga_folder}"; then
              echo "Error: Failed to create archive for $url"
              continue
            fi
            
            size=$(du -h "${sanitized_folder_name}.tar" | cut -f1)
            echo "${manga_folder}|${sanitized_folder_name}.tar|${current_index}|${size}" >> archives_info.txt
            rm -rf manga
            ((current_index++))
          done
          
      - name: Upload to PixelDrain
        if: steps.get_urls.outputs.workflow_complete != 'true'
        env:
          PIXELDRAIN_API: ${{ secrets.PIXELDRAIN_API }}
        run: |
          while IFS='|' read -r title filename index size; do
            echo "Uploading $filename to PixelDrain"
            ID=$(curl --progress-bar -T "$filename" -u :${PIXELDRAIN_API} https://pixeldrain.com/api/file/ | grep -Po '(?<="id":")[^"]*')
            if [ -n "$ID" ]; then
              echo "${title}|${filename}|${index}|${size}|https://pixeldrain.com/u/${ID}|https://pd.cybar.xyz/${ID}" >> upload_info.txt
            else
              echo "Error: Failed to upload $filename to PixelDrain"
            fi
            rm -f "$filename"
          done < archives_info.txt

      - name: Send Telegram Notification
        if: steps.get_urls.outputs.workflow_complete != 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # Create the message content
          cat << EOF > message.txt
          Manga Upload Successful!

          -----

          $(while IFS='|' read -r title filename index size link1 link2; do
            echo "Title: ${title}"
            echo "File name: ${filename}"
            echo "Index: ${index}"
            echo "Size: ${size}"
            echo "Link1: ${link1}"
            echo "Link2: ${link2}"
            echo
            echo "-----"
            echo
          done < upload_info.txt)
          
          Workflow ended at $(TZ='Asia/Jakarta' date "+%Y-%m-%d %H:%M:%S %Z")
          EOF

          # Send the message
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
               -H "Content-Type: application/json" \
               -d @- << EOF
          {
            "chat_id": "${TELEGRAM_CHAT_ID}",
            "text": $(jq -Rs . < message.txt),
            "parse_mode": "HTML"
          }
          EOF
